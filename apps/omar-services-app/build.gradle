buildscript {
  ext {
    grailsVersion = project.grailsVersion
    baseImage = ""
    hasJar = { true }
  }
  if(System.env.OMAR_COMMON_PROPERTIES)
  {
    apply from: System.env.OMAR_COMMON_PROPERTIES
  }
  repositories {
    mavenLocal()
    maven { url "${ossimMavenProxy}" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://plugins.gradle.org/m2/" }

  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
    classpath "com.netflix.nebula:gradle-ospackage-plugin:4.6.0"
    classpath 'com.github.skhatri:gradle-s3-plugin:1.0.4'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.15.0"
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"
apply plugin: "nebula.ospackage"
//apply plugin: 's3'
apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"

group "io.ossim.omar.apps"

ext {
  grailsVersion = project.grailsVersion
  gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
  minifyJs = true
  minifyCss = true
  includes = ["fonts/*"]
  excludes = ["**/*-debug.js", "**/*-deps.js", "**/*.gz", "**/*.txt", "**/*.less", "**/*.html", "**/i18n/**", "**/",
              ".grunt/**", "**/locale/**", "webjars/jquery/2.1.4/src/intro.js", "webjars/jquery/2.1.4/src/outro.js"]
}

repositories {
  mavenLocal()
  maven { url "${ossimMavenProxy}" }
  mavenCentral()
  maven { url "https://repo.grails.org/grails/core" }
  maven { url "https://plugins.gradle.org/m2/" }
}

dependencyManagement {
  imports {
    // mavenBom "org.grails:grails-bom:$grailsVersion"
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Dalston.SR4"
  }
  applyMavenExclusions false
}

ospackage {
  release '1'
  os = LINUX // only applied to RPM
  into '/opt/omar-services'
  from ('build/libs/') {
    include '*.jar'
  }
}

task copyRpmToS3(type: com.github.skhatri.s3aws.plugin.S3UploadTask, dependsOn: buildRpm) {
  def fileName = "${project.name}-${buildVersion}-${buildVersionTag}.rpm"
  bucket = "o2-delivery/dev/o2-rpms"
  key = "${fileName}"
  file = "./apps/omar-services-app/build/libs/omar-services-app.jar"
  link = 'latest/omar-services.rpm'
}

grails {
  plugins {
    compile project(':omar-raster-plugin')
    compile project(':omar-video-plugin')
    compile project(':omar-opir-plugin')
    compile project(':omar-geoscript-plugin')
    compile project(':omar-wfs-plugin')
    compile project(':omar-wms-plugin')
    compile project(':omar-oms-plugin')
    compile project(':omar-mensa-plugin')
    compile project(':omar-download-plugin')
    compile project(':omar-superoverlay-plugin')
  }
}

dependencies {
/*
  if ( System.getenv('O2_DEV_HOME')) {
    compile project(':omar-raster-plugin')
    compile project(':omar-video-plugin')
    compile project(':omar-geoscript-plugin')
    compile project(':omar-wfs-plugin')
    compile project(':omar-wms-plugin')
    compile project(':omar-oms-plugin')
    compile project(':omar-mensa-plugin')
  } else {
    compile(group: "io.ossim.omar.plugins", name: "omar-core-plugin", version: "1.1.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-hibernate-spatial-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-raster-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-video-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-opir-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-geoscript-plugin", version: "1.1.1-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-wfs-plugin", version: "1.1.1-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-wms-plugin", version: "1.1.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-wmts-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-mensa-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-stager-plugin", version: "1.1.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-jpip-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-download-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-superoverlay-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-avro-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-oms-plugin", version: "1.1.0-${buildVersionTag}", changing: jarArtifactsChanging)
*/

  compile "org.springframework.cloud:spring-cloud-starter-config"
  compile "org.springframework.cloud:spring-cloud-starter-eureka"

  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-plugin-i18n"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.1.5.Final"
  compile "org.grails.plugins:gsp"
  console "org.grails:grails-console"
  profile "org.grails.profiles:web"
  runtime "org.glassfish.web:el-impl:2.1.2-b03"
  runtime "com.h2database:h2"
  runtime "org.apache.tomcat:tomcat-jdbc"
  runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails.plugins:geb"
  testCompile "org.grails:grails-web-testing-support"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
  testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

bootRun {
    jvmArgs = [
    ]
}
