buildscript {
  ext {
    grailsVersion = project.grailsVersion
    baseImage = ""
    hasJar = { true }
  }
  if(System.env.OMAR_COMMON_PROPERTIES)
  {
    apply from: System.env.OMAR_COMMON_PROPERTIES
  }
  // repositories {
  //   mavenLocal()
  //   maven { url "${ossimMavenProxy}" }
  //   jcenter()
  //   maven { url "https://repo.grails.org/grails/core" }
  //   maven { url "https://plugins.gradle.org/m2/" }

  // }
  repositories {
    maven { url "${ossimMavenProxy}" }
    if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineGradleV}"

    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
       classpath "com.netflix.nebula:gradle-ospackage-plugin:4.6.0"
    }

    classpath 'com.github.skhatri:gradle-s3-plugin:1.0.4'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.17.0"
  id "org.sonarqube" version "2.6.2"
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
  apply plugin: "nebula.ospackage"
  apply plugin: 'nebula.ospackage-daemon'
}

apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"

group "io.ossim.omar.apps"

ext {
  grailsVersion = project.grailsVersion
  gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
  minifyJs = true
  minifyCss = true
  includes = ["fonts/*"]
  excludes = ["**/*-debug.js", "**/*-deps.js", "**/*.gz", "**/*.txt", "**/*.less", "**/*.html", "**/i18n/**", "**/",
              ".grunt/**", "**/locale/**", "webjars/jquery/2.1.4/src/intro.js", "webjars/jquery/2.1.4/src/outro.js"]
}

repositories {
  // mavenLocal()
  // maven { url "${ossimMavenProxy}" }
  // mavenCentral()
  // maven { url "https://repo.grails.org/grails/core" }
  // maven { url "https://plugins.gradle.org/m2/" }
  maven { url "${ossimMavenProxy}" }
  if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
  }
}

dependencyManagement {
  imports {
    // mavenBom "org.grails:grails-bom:$grailsVersion"
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudDependencyV}"
  }
  applyMavenExclusions false
}

/**
 * Copy a file into a location relative to the build/omar-service directory. Returns true if the resulting file exists.
 * @param fromLocation A file or directory to copy
 * @param intoLocation A directory to copy into. Do not include / (slash) as a prefix
 */
boolean copyFileIntoServiceDir(String fromLocation, String intoLocation) {
  String serviceDirLocation = "$project.buildDir.path/omar-services/$intoLocation"
  new File("$serviceDirLocation").parentFile.mkdirs()
  copy {
    from "$fromLocation"
    into "$serviceDirLocation"
  }
  return new File("$intoLocation").exists()
}

task createServiceDir(dependsOn: [build]) {
  description 'Bundles the jars, start script, init.d service script, and configuration into a service directory.'
  copyFileIntoServiceDir("${jar.getArchivePath()}", "bin")
  copyFileIntoServiceDir("${project.projectDir}/grails-app/conf", "config")
  copyFileIntoServiceDir("${project.rootDir}/scripts/service/start.sh", "scripts")
  copyFileIntoServiceDir("${project.rootDir}/scripts/service/omar-services", "scripts")
}

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {

ospackage {
  release '1'
  os = LINUX // only applied to RPM
  into '/opt/omar'
  from 'build/omar-services/'
  link("/etc/init.d/omar-services", "/opt/omar/scripts/omar-services", 755)
}
buildRpm.dependsOn createServiceDir

task copyRpmToS3(dependsOn: [buildRpm]) {
  String fileName = "${project.name}-${buildVersion}~${buildVersionTag}-1.noarch.rpm"
  String file = "${projectDir}/build/distributions/$fileName"
  doLast {
      exec {
          commandLine "aws", "s3","cp", "${file}", "s3://o2-delivery/${workingBranch}/o2-rpms/${fileName}"
      }
  }
}

}

grails {
  plugins {
    compile project(':omar-core-plugin')
    compile project(':omar-raster-plugin')
    compile project(':omar-video-plugin')
    compile project(':omar-opir-plugin')
    compile project(':omar-geoscript-plugin')
    compile project(':omar-wfs-plugin')
    compile project(':omar-wms-plugin')
    compile project(':omar-wmts-plugin')
    compile project(':omar-oms-plugin')
    compile project(':omar-mensa-plugin')
    compile project(':omar-download-plugin')
    compile project(':omar-superoverlay-plugin')
    compile project(':omar-wcs-plugin')
  }
}

dependencies {
  compile files('libs/joms-1.9.0-SNAPSHOT.jar')

  compile "org.springframework.cloud:spring-cloud-starter-config"
  compile "org.springframework.cloud:spring-cloud-starter-eureka"

  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-plugin-i18n"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:${hibernateCoreV}"
  compile "org.grails.plugins:gsp"
  console "org.grails:grails-console"
  profile "org.grails.profiles:web"
  runtime "org.glassfish.web:el-impl:2.1.2-b03"
  runtime "com.h2database:h2"
  runtime "org.apache.tomcat:tomcat-jdbc"
  runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineGrailsV}"
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails.plugins:geb"
  testCompile "org.grails:grails-web-testing-support"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:${seleniumHtmlUnitDriverV}"
  testRuntime "net.sourceforge.htmlunit:htmlunit:${htmlUnitV}"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

bootRun {
    jvmArgs = [
    ]
}
